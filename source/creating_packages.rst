=================
Creating Packages
=================

Set up the Development Environment
==================================

Install "conda-smithy"
----------------------

Create a new conda environment (let's name it ``smithy``):

.. code-block:: bash

    $ conda create -n smithy -c conda-forge conda-smithy "python>=3"
    $ conda activate smithy


Install Keybase
-----------------

Use `installation instructions <https://keybase.io/download>`_ 
to download and install **Keybase**. Start **Keybase** and log into
the system (DAMA group). Check if tokens are downloaded to
the directory on your local hard drive (``/keybase/team/dama/`` 
on Linux systems).

Configure "conda-smithy"
------------------------

Create the directory ``~/.conda-smithy`` (in your home directory). 

.. code-block:: bash

    $ cd ~
    $ mkdir .conda-smithy

Copy tokens to ``anaconda.token``, ``azure.token`` and ``github.token`` 
to ``~/.conda-smithy``:

.. code-block:: bash

    $ cp /keybase/team/dama/anaconda.token .conda-smithy/
    $ cp /keybase/team/dama/azure.token .conda-smithy/
    $ cp /keybase/team/dama/github.token .conda-smithy/


Generate and Edit meta.yaml Recipe Configuration File
=====================================================

Create directory for the package `(your-package-name)`:

.. code-block:: bash

    $ mkdir ~/packages
    $ cd ~/packages
    $ mkdir (your-package-name)
    $ cd (your-package-name)

(You are now in the cirectory ``~/packages/(your-package-name)``)

.. note::

    It is important that each command is run from correct
    home directory. Since it is easy to lose track of
    directory changes, all the paths will be specified 
    relative to HOME directory.


There are several ways to create the package recipe:

- generate recipe from existing PyPI package;

- manually create ``meta.yaml`` recipe file using ``conda skeleton``;

- use existing ``meta.yaml`` recipe file.

Generate recipe from PyPI package
---------------------------------

If the package ``(your-package-name)`` is available from PyPI, 
generate the recipe from the existing package:

.. code-block::

    $ cd ~/packages/(your-package-name)
    $ conda skeleton pypi (your-package-name) --noarch

Check if ``meta.yaml`` was created in
``~/packages/(your-package-name)/(your-package-name)`` directory.

.. note:: 

    TODO: Instructions on editing *meta.yaml* generated by 
    **conda skeleton**.

Manually create recipe or use the existing recipe
-------------------------------------------------

.. note:: 

    TODO: Some notes on finding the existing recipe or 
    a good template *meta.yaml* file.


Create temporary directory:

.. code-block::

    $ cd ~/packages/(your-package-name)
    $ mkdir (your-package-name)
    $ cd (your-package-name)

(You are now in the directory 
``~/packages/(your-package-name)/(your-package-name)``.)

Copy ``meta.yaml`` to into the temporary directory:

.. code-block::

    $ cp (where-meta-yaml-file-is)/meta.yml .

or download ``meta.yaml`` from known URL:

.. code-block::

    $ wget https://(url-of-meta-yaml-file)

.. note:: 

    TODO: Some notes on editing ``meta.yaml`` file.

Prepare Recipe Files
====================

Clone *event-model-feedstock* repository from GitHub
----------------------------------------------------

The *event-model-feedstock* may be cloned only once. If you already
have a clone of the feedstock, pull the latest version of the
*event-model-feedstock* repository and skip this step.

.. code-block::

    $ cd ~/packages
    $ git clone https://github.com/nsls-ii-forge/event-model-feedstock.git

Collect additional files
------------------------

Copy ``conda_build_config.yaml`` files into your recipe directory:

.. code-block::

    $ cd ~/packages
    $ cp event-model-feedstock/recipe/conda_build_config.yaml (your-package-name)/(your-package-name)/

Open and inspect ``conda_build_config.yaml``:

.. code-block::

    channel_sources:
    - nsls2forge,defaults
    channel_targets:
    - nsls2forge main
    python:
    - '3.6'

If you are building noarch package, then close the file. For arch packages with
Python versions specified in ``meta.yaml`` file remove the following lines:

.. code-block::

    python:
    - '3.6'

Copy licence file from the package repository into the recipe directory.
The file must be named ``LICENSE`` (without extension). For example, BSD license 
used for Bluesky project may be copied to recipes as

.. code-block::
    
    cd ~/recipes/(your-package-name)/(your-package-name)
    wget https://raw.githubusercontent.com/bluesky/bluesky/master/LICENSE


Now the content of the recipe directory 
``~/packages/(your-package-name)/(your-package-name)``
should look similar to this:

.. code-block::

    drwxr-xr-x 2 user user 4096 Sep 13 12:45 .
    drwxr-xr-x 3 user user 4096 Sep 13 12:10 ..
    -rw-r--r-- 1 user user   96 Sep 13 12:44 conda_build_config.yaml
    -rw-r--r-- 1 user user 1584 Sep 13 12:45 LICENSE
    -rw-r--r-- 1 user user 1064 Sep 13 12:10 meta.yaml

Generate Empty Feedstock Repository
===================================

Initialize feedstock
--------------------

Initialize feedstock using ``conda-smithy``:

.. code-block::

    $ cd ~/packages/(your-package-name)
    $ conda-smithy init (your-package-name)

A new directory ``~packages/(your-package-name)/(your-package-name)-feedstock``
is created.

Replace ``conda-forge.yml`` in the feedstock directory with ``conda-forge.yml`` from
``event-model-feedstock`` package:

.. code-block::

    $ cd ~/packages
    $ cp event-model-feedstock/conda-forge.yml (your-package-name)/(your-package-name)-feedstock/

Define Asure variables
----------------------

.. code-block::

    $ export AZURE_ORG_OR_USER=nsls2forge
    $ export AZURE_PROJECT_NAME=nsls2forge


Create GitHub repository and push files
---------------------------------------

.. code-block:: bash

    $ cd ~/packages/(your-package-name)/(your-package-name)-feedstock
    $ conda smithy register-github --organization nsls-ii-forge ./
    $ git add .
    $ git commit -m "Initial commit"
    $ git push -u upstream master

Enable CI on Azure pipelines
----------------------------

.. code-block:: bash

    $ conda smithy register-ci --organization nsls-ii-forge --without-circle \
    --without-appveyor --without-travis --without-drone --feedstock_directory ./

Verify that CI was enabled on Azure pipelines. Check for the following line 
in the output:

.. code-block:: bash

    * nsls-ii-forge/inflection-feedstock has been enabled on azure pipelines

Rerender and Push Feedstock Repository
======================================

Rerender the feedstock
----------------------

Create new branch ``rerender``:

.. code-block:: bash

    $ git checkout -b rerender

Rerender the feedstock:

.. code-block:: bash

    $ conda smithy rerender --feedstock_directory .

Commit the changes (the following command should be copied from the terminal output
produced by the previous command):

.. code-block:: bash

    $ git commit -m "MNT: Re-rendered with conda-build 3.18.9, conda-smithy 3.4.6, and conda-forge-pinning 2019.09.08"

Push changes to `upstream`:

.. code-block:: bash

    $ git push -u upstream rerender


Create pull request at GitHub
=============================

Open github page ``https://github.com/nsls-ii-forge/(your-package-name)-feedstock``
and create pull request. In pull request comments include a brief note and **the link to the original 
repository** of the package (PyPI, conda-forge or GitHub).

Closely examine build results to ensure that the packages were built for all systems
and Python version and all tests passed successfully. Correct issues if necessary.
Each time the change is made to configuration files, the feedstock must be
rerendered and changes must be committed and pushed. Merge the pull request once
all issues are fixed.

Associate Anaconda Token from Variable Groups With the New Pipeline
===================================================================

- Log into `dev.azure.com <https://dev.azure.com>`_. 
- Select the pipeline named ``(your-package-name)-feedstock``. 
- Click ``Edit``.
- Click a button with three vertical dots in the right top corner.
- Select 'Triggers' in the drop-down menu.
- Open 'Variables' tab.
- Select 'Variable groups'.
- Click the button 'Link variable groups'.
- Select 'Anaconda token'.


Issues
======

Tests fail for Linux system due to missing OpenGL
-------------------------------------------------

The solution is to place the file 
`yum_requirements.txt <https://raw.githubusercontent.com/nsls-ii-forge/collection-feedstock/master/recipe/yum_requirements.txt>`_
into the recipes directory 
``~/packages/(your-package-name)/(your-package-name)-feedstock/recipes``, 
then rerender, commit and push changes.